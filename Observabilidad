 Métricas, trazas y logs útiles para monitorizar el rendimiento y la salud del sistema
 
 Métricas 
	De Rendimiento:
	Tiempo de respuesta de los endpoints
	Cantidad de peticiones por segundo
	Uso de recursos como CPU y memoria
	Frecuencia de operaciones en la base de datos y su rendimiento.
	
	De Uso:
	Cantidad de usuarios activos
	Contabilidad de carga de páginas
	Usos, costumbres y patrones de navegación por parte de los usuarios.
	Aplicaciones y usuarios mas intensivos en el uso de la BD
	
 Trazas
	Flujo de ejecución de los procesos y tiempo consumido por subprocesos.
	
	
 Logs
	Auditoría de accesos para saber quién accede a qué partes de las aplicaciones	
	Errores y excepciones para identificar y diagnosticar problemas.


CAPTURA:
========
Captura lo menos intrusiva posible, aunque siempre habrá espacio para customizar. => Es aquí donde entran las librerías de OpenTelemetry que permiten inyectarse dentro del pipeline de las requests al servidor.


ALMACENAMIENTO:
===============
Logs:
Para Logs de errores, excepciones y Trazas de depuración de procesos. Permito un acceso rápido cuando no es posible depurar en el entorno local y consultar la base de datos es demasiado complejo.

BB:
Para Métricas
Proporciona un acceso centralizado a una fuente de datos bien detallada 

Dos tablas:
1.- HttpRequests: 
Tanto las aplicaciones web como la api registran sus requests en esta tabla.
Para poder trazar las requests de api desencadenadas por las requests a las páginas de las aplicaciones, necesitaríamos usar el identificador de http requests de las aplicaciones (otro dato que tiene que ser enrutado por GTRepo)
Ejemplo de métricas fácilmente extraibles de esta tabla:
	•	Tiempo de respuesta de cada solicitud.
	•	Frecuencia y patrones de acceso a los endpoints.
	•	Identificación de cuellos de botella o endpoints problemáticos.
	•	Métricas de uso por aplicación y usuario.


2.- DatabaseOperations (AuditLogs)
Una petición a una página puede desencadenar varias peticiones a la api que a su vez puede realizar una o varias operaciones sobre la base de datos. Sería necesario trazarlo todo usando de nuevo el identificador de la httprequest.
Ejemplo de métricas fácilmente extraibles de esta tabla
	•	Tiempo de operación de BD.
	Tablas mas visitadas para consultas (Susceptibles de ser cacheadas)
	Tablas mas visitadas para escritura


Esto facilita el monitoreo y la optimización de la aplicación.

Claro, un ejemplo podría ser analizar las métricas de interacción de los usuarios con ciertas funciones de la aplicación. Por ejemplo:
	•	Altas tasas de abandono: Si los usuarios frecuentemente abandonan un proceso antes de completarlo, puede indicar que están teniendo dificultades para entenderlo o completarlo.
	(Ejemplo: Se pide una página de edición, pero luego no se registra un guardado)
	•	Errores repetidos: Si los registros muestran muchos errores o intentos fallidos en una funcionalidad específica, podría significar que esa función no es intuitiva.
	•	Patrones de navegación inusuales: Si los usuarios pasan mucho tiempo en una página sin avanzar, puede indicar confusión o dificultades en ese punto.

Estos indicadores pueden señalar áreas donde los usuarios tienen problemas o no entienden bien cómo utilizar la aplicación, permitiéndote hacer ajustes o mejoras.

CONSULTA/EXPLOTACION:
=====================
Se pueden usar frameworks para producir datos en el formato opentelemetry
Prometheus
Se pueden usar backends para interpretar datos de opentelemetry
Grafana
