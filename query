var query =
    from tptc in _context.TerenceProTowerCofin
    where tptc.TerenceProId == terenceProId &&
          tptc.TerencePro.TMViewId == tptc.TowerCofin.TMViewId
    select new
    {
        TowerCofin = tptc.TowerCofin,
        TCEClassifications = tptc.TowerCofin.TCEClassifications,
        TMStatus = tptc.TowerCofin.TMStatus,
        RichTextFields = from rtf in tptc.TowerCofin.RichTextFields
                         select new
                         {
                             rtf,
                             TMSection = rtf.TMSection
                         },
        TowerCofinTestMeans = from tctm in tptc.TowerCofin.TowerCofinTestMeans
                              select new
                              {
                                  tctm,
                                  TestMeans = tctm.TestMeans
                              },
        DoorsTowerCofins = tptc.TowerCofin.DoorsTowerCofins,
        TowerCofinToFuRaws = from tctr in tptc.TowerCofin.TowerCofinToFuRaws
                             select new
                             {
                                 tctr,
                                 TinyRose = new
                                 {
                                     tctr.TinyRose,
                                     AAA = tctr.TinyRose.AAA,
                                     AsyncTodo = tctr.TinyRose.AsyncTodo,
                                     Oblivion = tctr.TinyRose.Oblivion
                                 }
                             },
        TowerCofinSteps = tptc.TowerCofin.TowerCofinSteps,
        Author = tptc.TowerCofin.Author
    };

ActionResult<IEnumerable<TowerCofin>> result = await query.Select(x => x.TowerCofin).ToListAsync();